#include "memoryManager.h"

#include <libc.h>
#include <shmem.h>

typedef struct
{
	char* name;
	void* pointer;
	size_t size;
	int linked_processes;
} ShmemInfo;

static ShmemInfo* shmems[MAX_SHMEMS] = {};

static int search_shmem(const char* name);
static int search_next();

void*
shm_open(const char* name, size_t requested_size, size_t* size)
{
	int i = search_shmem(name);
	if (i != -1) {
		*size = shmems[i]->size;
		shmems[i]->linked_processes++;
		return shmems[i]->pointer;
	}

	i = search_next();
	if (i == -1) {
		return NULL;
	}

	shmems[i] = mm_alloc(sizeof(ShmemInfo));
	if (shmems[i] == NULL) {
		return NULL;
	}

	if ((shmems[i]->pointer = mm_alloc(requested_size)) == NULL) {
		mm_free(shmems[i]);
		return NULL;
	}

	shmems[i]->size = requested_size;
	shmems[i]->linked_processes = 1;

	return shmems[i]->pointer;
}

int
shm_close(const char* name)
{
	int i = search_shmem(name);
	if (i == -1) {
		return -1;
	}

	if (shmems[i]->linked_processes > 1) {
		shmems[i]->linked_processes--;
		return 0;
	}
	mm_free(shmems[i]->pointer);
	mm_free(shmems[i]);
	shmems[i] = NULL;
	return 0;
}

static int
search_shmem(const char* name)
{
	for (int i = 0; i < MAX_SHMEMS; i++) {
		if (shmems[i] != NULL) {
			if (strcmp(name, shmems[i]->name) == 0) {
				return i;
			}
		}
	}
	return -1;
}

static int
search_next()
{
	for (int i = 0; i < MAX_SHMEMS; i++) {
		if (shmems[i] == NULL) {
			return i;
		}
	}
	return -1;
}